#!/bin/bash

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –õ–æ–≥—ñ–Ω —ñ –ø–∞—Ä–æ–ª—å
LOGIN="Dima1203"
PASSWORD="Emma0707@"

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–º–∏–ª–æ–∫
check_error() {
  if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∫–æ–º–∞–Ω–¥–∏${NC}"
    return 1
  else
    echo -e "${GREEN}‚úì –ö–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ${NC}"
    return 0
  fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
print_header() {
  echo -e "\n${BLUE}‚∏ª${NC}"
  echo -e "${BLUE}üîπ $1${NC}"
  echo -e "${BLUE}‚∏ª${NC}\n"
}

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª–æ–≥—ñ–Ω–∞ —Ç–∞ –ø–∞—Ä–æ–ª—è
verify_credentials() {
  echo -e "${YELLOW}–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–Ω–∞ —Ç–∞ –ø–∞—Ä–æ–ª—è...${NC}"
  if [ "$LOGIN" != "Dima1203" ] || [ "$PASSWORD" != "Emma0707@" ]; then
    echo -e "${RED}‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å. –ú—ñ–Ω—è—î–º–æ –º—ñ—Å—Ü—è–º–∏...${NC}"
    TEMP=$LOGIN
    LOGIN=$PASSWORD
    PASSWORD=$TEMP
    echo -e "${YELLOW}–ù–æ–≤–∏–π –ª–æ–≥—ñ–Ω: $LOGIN, –ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å: $PASSWORD${NC}"
  else
    echo -e "${GREEN}–õ–æ–≥—ñ–Ω —ñ –ø–∞—Ä–æ–ª—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ${NC}"
  fi
}

verify_credentials

print_header "1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É Kubernetes"
echo "–í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É: kubectl cluster-info"
kubectl cluster-info
if check_error; then
  echo -e "${GREEN}‚úì Kubernetes –∫–ª–∞—Å—Ç–µ—Ä –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ${NC}"
else
  echo -e "${RED}‚ùå –ü—Ä–æ–±–ª–µ–º–∏ –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ Kubernetes –∫–ª–∞—Å—Ç–µ—Ä–∞${NC}"
  echo "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π –∫–ª–∞—Å—Ç–µ—Ä —Ç–∞ —á–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π kubectl"
fi

print_header "2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –Ω–æ–¥ (–≤—É–∑–ª—ñ–≤)"
echo "–í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É: kubectl get nodes"
kubectl get nodes
if check_error; then
  NOT_READY_NODES=$(kubectl get nodes -o jsonpath='{.items[?(@.status.conditions[?(@.type=="Ready")].status!="True")].metadata.name}')
  if [ -z "$NOT_READY_NODES" ]; then
    echo -e "${GREEN}‚úì –í—Å—ñ –≤—É–∑–ª–∏ –≤ —Å—Ç–∞—Ç—É—Å—ñ Ready${NC}"
  else
    echo -e "${RED}‚ùå –î–µ—è–∫—ñ –≤—É–∑–ª–∏ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å—ñ Ready: $NOT_READY_NODES${NC}"
    for node in $NOT_READY_NODES; do
      echo "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–≤ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –≤—É–∑–ª–∞ $node:"
      kubectl describe node $node | grep -A 5 "Conditions:"
    done
  fi
else
  echo -e "${RED}‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—É–∑–ª–∏${NC}"
fi

print_header "3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∏—Ö –ø–æ–¥—ñ–≤"
echo "–í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É: kubectl get pods -A"
kubectl get pods -A
if check_error; then
  PROBLEM_PODS=$(kubectl get pods -A -o jsonpath='{range .items[?(@.status.phase!="Running" && @.status.phase!="Succeeded")]}{.metadata.namespace}{" "}{.metadata.name}{" "}{.status.phase}{"\n"}{end}')
  if [ -–∑ "$PROBLEM_PODS" ]; then
    echo -–µ "${GREEN}‚úì –í—Å—ñ –ø–æ–¥–∏ –≤ —Å—Ç–∞—Ç—É—Å—ñ Running –∞–±–æ Completed${NC}"
  else
    echo -–µ "${RED}‚ùå –í–∏—è–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ñ –ø–æ–¥–∏:${NC}"
    echo "$PROBLEM_PODS" | while read namespace pod status; do
      if [ -–Ω "$namespace" ] && [ -–Ω "$pod" ]; then
        echo -–µ "Pod ${YELLOW}$pod${NC} –≤ namespace ${YELLOW}$namespace${NC} –º–∞—î —Å—Ç–∞—Ç—É—Å ${RED}$status${NC}"
        echo "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–≤:"
        kubectl logs $pod -n $namespace --tail=20 2>/dev/null || echo "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ª–æ–≥–∏."
        echo "–û–ø–∏—Å –ø–æ–¥—É:"
        kubectl describe pod $pod -n $namespace | grep -E "Events:|Warning|Error" -A 5
        echo "------"
      fi
    done
  fi
else
  echo -–µ "${RED}‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–¥–∏${NC}"
fi

print_header "4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —Å–µ—Ä–≤—ñ—Å—ñ–≤"
echo "–í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É: kubectl get svc -A"
kubectl get svc -A
if check_error; then
  echo -–µ "${GREEN}‚úì –°–µ—Ä–≤—ñ—Å–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ${NC}"
  echo "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–≤—ñ—Å—É my-application-service:"
  kubectl describe service my-application-service 2>/dev/null || echo "–°–µ—Ä–≤—ñ—Å my-application-service –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
else
  echo -–µ "${RED}‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Ä–≤—ñ—Å–∏${NC}"
fi

print_header "5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó Ingress"
echo "–í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É: kubectl get ingress -A"
kubectl get ingress -A
if check_error; then
  INGRESS_CONFIGURED=$(kubectl get ingress -A -o jsonpath='{.items[*].metadata.name}' 2>/dev/null)
  if [ -–Ω "$INGRESS_CONFIGURED" ]; then
    echo -–µ "${GREEN}‚úì Ingress –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π${NC}"
    echo "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ingress my-application-ingress:"
    kubectl describe ingress my-application-ingress 2>/dev/null || echo "Ingress my-application-ingress –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    echo "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–≤ Ingress –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞:"
    kubectl logs -l app.kubernetes.io/name=ingress-nginx -n kube-system --tail=20 2>/dev/null || echo "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ–¥–∏ ingress-nginx –≤ namespace kube-system"
  else
    echo -–µ "${YELLOW}‚ö†Ô∏è Ingress –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π${NC}"
  fi
else
  echo -–µ "${RED}‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ ingress${NC}"
fi

print_header "6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL"
echo "–í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É: kubectl get pods -n database"
kubectl get pods -n database 2>/dev/null
if [ $? -eq 0 ]; then
  PG_POD=$(kubectl get pods -n database -l app=postgres -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)
  if [ -–Ω "$PG_POD" ]; then
    echo -–µ "${GREEN}‚úì PostgreSQL –ø–æ–¥ –∑–Ω–∞–π–¥–µ–Ω–æ: $PG_POD${NC}"
    echo "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–≤ PostgreSQL:"
    kubectl logs $PG_POD -n database --tail=20 || echo "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ª–æ–≥–∏ PostgreSQL"
    echo "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É PostgreSQL:"
    kubectl describe pod $PG_POD -n database | grep -E "Status:|Events:" -A 5
  else
    echo -–µ "${YELLOW}‚ö†Ô∏è PostgreSQL –ø–æ–¥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ namespace database${NC}"
  fi
else
  echo -–µ "${YELLOW}‚ö†Ô∏è Namespace database –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ –Ω—å–æ–≥–æ${NC}"
fi

print_header "7. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —Ç–∞ –ª–æ–≥—ñ–≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ–≤"
echo "–í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É: kubectl get deployments -A"
kubectl get deployments -A
check_error

echo "–í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É: kubectl get daemonsets -A"
kubectl get daemonsets -A
check_error

echo "–í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É: kubectl get statefulsets -A"
kubectl get statefulsets -A
check_error

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–¥–∞—Ç–∫—É my-application
echo -–µ "\n–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–≤ –¥–æ–¥–∞—Ç–∫—É my-application:"
POD_NAME=$(kubectl get pods -l app=my-application -o jsonpath="{.items[0].metadata.name}" 2>/dev/null)
if [ -–Ω "$POD_NAME" ]; then
  kubectl logs $POD_NAME --tail=20
  check_error
else
  echo -–µ "${RED}‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ–¥–∏ –∑ –º—ñ—Ç–∫–æ—é app=my-application${NC}"
fi

print_header "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –¥–æ–¥–∞—Ç–∫—É"
echo "–ó–∞–ø—É—Å–∫ port-forward –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:"
kubectl port-forward service/my-application-service 8080:80 &
PF_PID=$!
sleep 3
echo "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è HTTP-–∑–∞–ø–∏—Ç—É:"
curl -s -m 5 http://localhost:8080 > /dev/null && echo -–µ "${GREEN}‚úì HTTP-–∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π${NC}" || echo -–µ "${RED}‚ùå –ü–æ–º–∏–ª–∫–∞ HTTP-–∑–∞–ø–∏—Ç—É${NC}"
kill $PF_PID 2>/dev/null

print_header "üìå –í–∏—Å–Ω–æ–≤–æ–∫"
# –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–æ–±–ª–µ–º
NODE_PROBLEMS=$(kubectl get nodes -o jsonpath='{.items[?(@.status.conditions[?(@.type=="Ready")].status!="True")].metadata.name}' | wc -w)
POD_PROBLEMS=$(kubectl get pods -A -–æ jsonpath='{range .items[?(@.status.phase!="Running" && @.status.phase!="Succeeded")]}{.metadata.name}{"\n"}{end}' | wc -l)

if [ $NODE_PROBLEMS -eq 0 ] && [ $POD_PROBLEMS -eq 0 ]; then
  echo -–µ "${GREEN}‚úÖ Kubernetes –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ. –í—Å—ñ –≤—É–∑–ª–∏ —Ç–∞ –ø–æ–¥–∏ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Å—Ç–∞–Ω—ñ.${NC}"
else
  echo -–µ "${RED}‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏ –≤ –∫–ª–∞—Å—Ç–µ—Ä—ñ Kubernetes:${NC}"
  [ $NODE_PROBLEMS -–Ω–µ 0 ] && echo -–µ "- –ü—Ä–æ–±–ª–µ–º–∏ –∑ ${RED}$NODE_PROBLEMS${NC} –≤—É–∑–ª–∞–º–∏"
  [ $POD_PROBLEMS -–Ω–µ 0 ] && echo -–µ "- –ü—Ä–æ–±–ª–µ–º–∏ –∑ ${RED}$POD_PROBLEMS${NC} –ø–æ–¥–∞–º–∏"
  echo -–µ "\n–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –¥–µ—Ç–∞–ª—ñ –≤–∏—â–µ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó."
fi

echo -–µ "${GREEN}–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. üöÄ${NC}"

#!/bin/bash

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
PROJECT_NAME="predator-k8s"
CLUSTER_NAME="predator-cluster"
REGION="us-central1"
NAMESPACE="predator"

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–º–∏–ª–æ–∫
check_error() {
  if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏${NC}"
    exit 1
  else
    echo -e "${GREEN}‚úì –ö–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ${NC}"
  fi
}

print_section() {
  echo -e "\n${BLUE}=======================================================================================${NC}"
  echo -e "${CYAN}üîπ $1${NC}"
  echo -e "${BLUE}=======================================================================================${NC}"
}

# –°–ï–ö–¶–Ü–Ø 1: –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø GOOGLE CLOUD
print_section "1Ô∏è‚É£ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Google Cloud"

echo -e "${YELLOW}–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ gcloud...${NC}"
if ! command -v gcloud &> /dev/null; then
    echo -e "${YELLOW}–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Google Cloud SDK...${NC}"
    curl https://sdk.cloud.google.com | bash
    exec -l $SHELL
    gcloud init
    check_error
else
    echo -e "${GREEN}‚úì Google Cloud SDK –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ${NC}"
fi

echo -e "${YELLOW}–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É (—è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î)...${NC}"
gcloud projects describe $PROJECT_NAME &> /dev/null || gcloud projects create $PROJECT_NAME
check_error
gcloud config set project $PROJECT_NAME
check_error

echo -e "${YELLOW}–£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö API —Å–µ—Ä–≤—ñ—Å—ñ–≤...${NC}"
gcloud services enable container.googleapis.com
check_error
gcloud services enable compute.googleapis.com
check_error
gcloud services enable monitoring.googleapis.com
check_error
gcloud services enable logging.googleapis.com
check_error

# –°–ï–ö–¶–Ü–Ø 2: –°–¢–í–û–†–ï–ù–ù–Ø KUBERNETES –ö–õ–ê–°–¢–ï–†–ê –í –†–ï–ñ–ò–ú–Ü AUTOPILOT
print_section "2Ô∏è‚É£ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Kubernetes-–∫–ª–∞—Å—Ç–µ—Ä–∞"

echo -e "${YELLOW}–°—Ç–≤–æ—Ä–µ–Ω–Ω—è GKE Autopilot –∫–ª–∞—Å—Ç–µ—Ä–∞ ${CLUSTER_NAME}...${NC}"
echo -e "${BLUE}–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ 5-10 —Ö–≤–∏–ª–∏–Ω...${NC}"
gcloud container clusters create-auto $CLUSTER_NAME \
    --region $REGION \
    --project $PROJECT_NAME \
    --release-channel=regular
check_error

echo -e "${YELLOW}–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è kubectl –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–º...${NC}"
gcloud container clusters get-credentials $CLUSTER_NAME \
    --region $REGION \
    --project $PROJECT_NAME
check_error

echo -e "${YELLOW}–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞...${NC}"
kubectl get nodes
check_error

# –°–ï–ö–¶–Ü–Ø 3: –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø –†–û–ó–ì–û–†–¢–ê–ù–ù–Ø (HELM + ARGOCD)
print_section "3Ô∏è‚É£ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è (Helm + ArgoCD)"

echo -e "${YELLOW}–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Helm (—è–∫—â–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)...${NC}"
if ! command -v helm &> /dev/null; then
    echo -e "${YELLOW}–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Helm...${NC}"
    curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
    check_error
else
    echo -e "${GREEN}‚úì Helm –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ${NC}"
fi

echo -e "${YELLOW}–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é Helm...${NC}"
helm repo add stable https://charts.helm.sh/stable
helm repo update
check_error

echo -e "${YELLOW}–°—Ç–≤–æ—Ä–µ–Ω–Ω—è namespace –¥–ª—è ArgoCD...${NC}"
kubectl create namespace argocd
check_error

echo -e "${YELLOW}–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è ArgoCD...${NC}"
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
check_error

echo -e "${YELLOW}–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É ArgoCD...${NC}"
kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd
check_error

echo -e "${YELLOW}–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ArgoCD...${NC}"
ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
echo -e "${GREEN}ArgoCD –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${ARGOCD_PASSWORD}${NC}"
echo "$ARGOCD_PASSWORD" > argocd-admin-password.txt
echo -e "${GREEN}–ü–∞—Ä–æ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ argocd-admin-password.txt${NC}"

echo -e "${YELLOW}–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ ArgoCD —á–µ—Ä–µ–∑ Port-Forward...${NC}"
echo -e "${BLUE}–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É ArgoCD, –≤–∏–∫–æ–Ω–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:${NC}"
echo -e "kubectl port-forward svc/argocd-server -n argocd 8080:443"
echo -e "${BLUE}–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –≤—ñ–¥–∫—Ä–∏–π—Ç–µ —É –±—Ä–∞—É–∑–µ—Ä—ñ: https://localhost:8080${NC}"
echo -e "${BLUE}–õ–æ–≥—ñ–Ω: admin, –ü–∞—Ä–æ–ª—å: ${ARGOCD_PASSWORD}${NC}"

# –°–ï–ö–¶–Ü–Ø 4: –ë–ê–õ–ê–ù–°–£–í–ê–ù–ù–Ø –ù–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø (NGINX INGRESS CONTROLLER)
print_section "4Ô∏è‚É£ –ë–∞–ª–∞–Ω—Å—É–≤–∞–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (Nginx Ingress)"

echo -e "${YELLOW}–°—Ç–≤–æ—Ä–µ–Ω–Ω—è namespace –¥–ª—è Nginx Ingress...${NC}"
kubectl create namespace ingress-nginx
check_error

echo -e "${YELLOW}–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Nginx Ingress Controller...${NC}"
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm install ingress-nginx ingress-nginx/ingress-nginx \
    --namespace ingress-nginx \
    --set controller.publishService.enabled=true
check_error

echo -e "${YELLOW}–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É Ingress Controller...${NC}"
kubectl wait --namespace ingress-nginx \
    --for=condition=ready pod \
    --selector=app.kubernetes.io/component=controller \
    --timeout=300s
check_error

echo -e "${YELLOW}–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ—ó IP Ingress Controller...${NC}"
INGRESS_IP=$(kubectl get service ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
echo -e "${GREEN}Ingress Controller IP: ${INGRESS_IP}${NC}"
echo "$INGRESS_IP" > ingress-ip.txt
echo -e "${GREEN}IP –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ ingress-ip.txt${NC}"

# –°–ï–ö–¶–Ü–Ø 5: –°–¢–í–û–†–ï–ù–ù–Ø –†–û–ë–û–ß–û–ì–û –ü–†–û–°–¢–û–†–£ –¢–ê –û–°–ù–û–í–ù–ò–• –†–ï–°–£–†–°–Ü–í
print_section "5Ô∏è‚É£ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–±–æ—á–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—Ä—É —Ç–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤"

echo -e "${YELLOW}–°—Ç–≤–æ—Ä–µ–Ω–Ω—è namespace –¥–ª—è –¥–æ–¥–∞—Ç–∫—ñ–≤...${NC}"
kubectl create namespace $NAMESPACE
check_error

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ deplyment.yaml
cat > deployment.yaml << EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: predator-app
  namespace: $NAMESPACE
spec:
  replicas: 2
  selector:
    matchLabels:
      app: predator
  template:
    metadata:
      labels:
        app: predator
    spec:
      containers:
      - name: predator
        image: nginx:latest
        ports:
        - containerPort: 80
        resources:
          limits:
            cpu: "0.5"
            memory: "512Mi"
          requests:
            cpu: "0.2"
            memory: "256Mi"
EOF

echo -e "${YELLOW}–°—Ç–≤–æ—Ä–µ–Ω–Ω—è Deployment...${NC}"
kubectl apply -f deployment.yaml
check_error

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è service.yaml
cat > service.yaml << EOF
apiVersion: v1
kind: Service
metadata:
  name: predator-service
  namespace: $NAMESPACE
spec:
  selector:
    app: predator
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: ClusterIP
EOF

echo -e "${YELLOW}–°—Ç–≤–æ—Ä–µ–Ω–Ω—è Service...${NC}"
kubectl apply -f service.yaml
check_error

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è ingress.yaml
cat > ingress.yaml << EOF
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: predator-ingress
  namespace: $NAMESPACE
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: predator.example.com  # –ó–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–ª–∞—Å–Ω–∏–π –¥–æ–º–µ–Ω
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: predator-service
            port:
              number: 80
EOF

echo -e "${YELLOW}–°—Ç–≤–æ—Ä–µ–Ω–Ω—è Ingress...${NC}"
kubectl apply -f ingress.yaml
check_error

# –°–ï–ö–¶–Ü–Ø 6: –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –î–ê–ù–ò–• (PERSISTENT STORAGE)
print_section "6Ô∏è‚É£ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö (Persistent Storage)"

cat > pvc.yaml << EOF
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: predator-data
  namespace: $NAMESPACE
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
EOF

echo -e "${YELLOW}–°—Ç–≤–æ—Ä–µ–Ω–Ω—è PersistentVolumeClaim...${NC}"
kubectl apply -f pvc.yaml
check_error

# –°–ï–ö–¶–Ü–Ø 7: –ú–û–ù–Ü–¢–û–†–ò–ù–ì –¢–ê –õ–û–ì–ò (PROMETHEUS + GRAFANA)
print_section "7Ô∏è‚É£ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç–∞ –õ–æ–≥–∏ (Prometheus + Grafana)"

echo -e "${YELLOW}–°—Ç–≤–æ—Ä–µ–Ω–Ω—è namespace –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...${NC}"
kubectl create namespace monitoring
check_error

echo -e "${YELLOW}–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Prometheus —ñ Grafana...${NC}"
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update
helm install prometheus prometheus-community/kube-prometheus-stack \
    --namespace monitoring
check_error

echo -e "${YELLOW}–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É Prometheus —ñ Grafana...${NC}"
kubectl wait --for=condition=available --timeout=300s deployment/prometheus-kube-prometheus-operator -n monitoring
check_error

echo -e "${YELLOW}–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è Grafana...${NC}"
GRAFANA_PASSWORD=$(kubectl get secret -n monitoring prometheus-grafana -o jsonpath="{.data.admin-password}" | base64 --decode)
echo -e "${GREEN}Grafana –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${GRAFANA_PASSWORD}${NC}"
echo "$GRAFANA_PASSWORD" > grafana-admin-password.txt
echo -e "${GREEN}–ü–∞—Ä–æ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ grafana-admin-password.txt${NC}"

echo -e "${YELLOW}–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ Grafana —á–µ—Ä–µ–∑ Port-Forward...${NC}"
echo -e "${BLUE}–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É Grafana, –≤–∏–∫–æ–Ω–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:${NC}"
echo -e "kubectl port-forward svc/prometheus-grafana -n monitoring 3000:80"
echo -e "${BLUE}–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –≤—ñ–¥–∫—Ä–∏–π—Ç–µ —É –±—Ä–∞—É–∑–µ—Ä—ñ: http://localhost:3000${NC}"
echo -e "${BLUE}–õ–æ–≥—ñ–Ω: admin, –ü–∞—Ä–æ–ª—å: ${GRAFANA_PASSWORD}${NC}"

# –°–ï–ö–¶–Ü–Ø 8: –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –ú–ê–°–®–¢–ê–ë–£–í–ê–ù–ù–Ø (HPA)
print_section "8Ô∏è‚É£ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è (HPA)"

cat > hpa.yaml << EOF
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: predator-hpa
  namespace: $NAMESPACE
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: predator-app
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
EOF

echo -e "${YELLOW}–°—Ç–≤–æ—Ä–µ–Ω–Ω—è Horizontal Pod Autoscaler...${NC}"
kubectl apply -f hpa.yaml
check_error

# –°–ï–ö–¶–Ü–Ø 9: –ü–ï–†–ï–í–Ü–†–ö–ê –°–¢–ê–¢–£–°–£ –í–°–¢–ê–ù–û–í–õ–ï–ù–ò–• –ö–û–ú–ü–û–ù–ï–ù–¢–Ü–í
print_section "9Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤"

echo -e "${YELLOW}–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –ø–æ–¥—ñ–≤...${NC}"
kubectl get pods -n $NAMESPACE
echo -e "\n${YELLOW}–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –ø–æ–¥—ñ–≤ ArgoCD...${NC}"
kubectl get pods -n argocd
echo -e "\n${YELLOW}–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –ø–æ–¥—ñ–≤ Nginx Ingress...${NC}"
kubectl get pods -n ingress-nginx
echo -e "\n${YELLOW}–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –ø–æ–¥—ñ–≤ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...${NC}"
kubectl get pods -n monitoring
echo -e "\n${YELLOW}–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É PVC...${NC}"
kubectl get pvc -n $NAMESPACE
echo -e "\n${YELLOW}–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É HPA...${NC}"
kubectl get hpa -n $NAMESPACE
echo -e "\n${YELLOW}–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —Å–µ—Ä–≤—ñ—Å—ñ–≤...${NC}"
kubectl get services -n $NAMESPACE
echo -e "\n${YELLOW}–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É Ingress...${NC}"
kubectl get ingress -n $NAMESPACE

# –§–Ü–ù–ê–õ–¨–ù–ï –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø
print_section "üìå –í–∏—Å–Ω–æ–≤–æ–∫"

echo -e "${GREEN}‚úÖ GKE Autopilot –∫–ª–∞—Å—Ç–µ—Ä —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ —ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!${NC}"
echo -e "${GREEN}‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏:${NC}"
echo -e "   - ArgoCD –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è"
echo -e "   - Nginx Ingress –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó —Ç—Ä–∞—Ñ—ñ–∫—É"
echo -e "   - Prometheus —ñ Grafana –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"
echo -e "   - Persistent Storage –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö"
echo -e "   - Horizontal Pod Autoscaler –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è"

echo -e "\n${YELLOW}–í–∞–∂–ª–∏–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –¥–æ—Å—Ç—É–ø—É:${NC}"
echo -e "–ö–ª–∞—Å—Ç–µ—Ä: ${CLUSTER_NAME} –≤ —Ä–µ–≥—ñ–æ–Ω—ñ ${REGION}"
echo -e "IP –∞–¥—Ä–µ—Å–∞ Ingress: ${INGRESS_IP}" 
echo -e "ArgoCD –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ argocd-admin-password.txt"
echo -e "Grafana –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ grafana-admin-password.txt"

echo -e "\n${YELLOW}–î–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ–≤:${NC}"
echo -e "ArgoCD: kubectl port-forward svc/argocd-server -n argocd 8080:443"
echo -e "Grafana: kubectl port-forward svc/prometheus-grafana -n monitoring 3000:80"

echo -e "\n${GREEN}üöÄ –í–∞—à –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π Kubernetes-–∫–ª–∞—Å—Ç–µ—Ä –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!${NC}"
echo -e "${BLUE}=======================================================================================${NC}"

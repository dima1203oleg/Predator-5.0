import os
import sys
import requests
import subprocess
from pathlib import Path
from typing import Dict, List, Tuple

def check_sonarqube() -> Tuple[bool, str]:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ SonarQube"""
    try:
        token = 'ae5fe5168d12c610c7b94cdb641b53e1c54c0654'
        host = 'http://localhost:9000'
        project = 'predator-analytics'
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —Å–µ—Ä–≤–µ—Ä–∞
        response = requests.get(
            f"{host}/api/system/status",
            auth=(token, ''),
            timeout=10,
            verify=True
        )
        
        if response.status_code != 200:
            return False, f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}"
            
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç—É
        project_response = requests.get(
            f"{host}/api/projects/search?projects={project}",
            auth=(token, ''),
            timeout=10
        )
        
        if project_response.status_code != 200:
            return False, "–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –ø—Ä–æ–µ–∫—Ç—É"
        
        return True, "–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ"
        
    except requests.exceptions.SSLError:
        return False, "–ü–æ–º–∏–ª–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∞"
    except Exception as e:
        return False, str(e)

def check_tools() -> List[Dict]:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤"""
    tools = {
        'sonar-scanner': 'sonar-scanner --version',
        'docker': 'docker --version',
        'python': 'python --version',
        'pip': 'pip --version',
        'git': 'git --version'
    }
    
    results = []
    for tool, command in tools.items():
        try:
            output = subprocess.check_output(command.split(), stderr=subprocess.STDOUT)
            results.append({
                'tool': tool,
                'status': True,
                'version': output.decode().strip()
            })
        except Exception:
            results.append({
                'tool': tool,
                'status': False,
                'version': None
            })
    return results

def check_configs() -> List[Dict]:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    required_files = {
        'sonar-project.properties': 'SonarQube –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è',
        '.snyk': 'Snyk –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è',
        'docker-compose.yml': 'Docker –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è',
        '.github/workflows/ci.yml': 'GitHub Actions –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è',
        'requirements.txt': 'Python –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ'
    }
    
    results = []
    for file_path, description in required_files.items():
        file = Path(file_path)
        results.append({
            'file': file_path,
            'description': description,
            'exists': file.exists()
        })
    return results

def check_environment() -> List[Dict]:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    required_vars = {
        'SONAR_TOKEN': 'SonarQube —Ç–æ–∫–µ–Ω',
        'GITHUB_TOKEN': 'GitHub —Ç–æ–∫–µ–Ω',
        'SNYK_TOKEN': 'Snyk —Ç–æ–∫–µ–Ω',
        'POSTGRES_HOST': 'PostgreSQL —Ö–æ—Å—Ç',
        'POSTGRES_PORT': 'PostgreSQL –ø–æ—Ä—Ç'
    }
    
    results = []
    for var, description in required_vars.items():
        value = os.getenv(var)
        results.append({
            'variable': var,
            'description': description,
            'exists': value is not None
        })
    return results

def main():
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –ø—ñ–¥–∫–ª—é—á–µ–Ω—å...\n")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ SonarQube
    sonar_ok, sonar_msg = check_sonarqube()
    print(f"{'‚úÖ' if sonar_ok else '‚ùå'} SonarQube: {sonar_msg}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
    print("\n–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏:")
    for tool in check_tools():
        status = '‚úÖ' if tool['status'] else '‚ùå'
        version = f" ({tool['version']})" if tool['version'] else ""
        print(f"{status} {tool['tool']}{version}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
    print("\n–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ —Ñ–∞–π–ª–∏:")
    for config in check_configs():
        status = '‚úÖ' if config['exists'] else '‚ùå'
        print(f"{status} {config['description']}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    print("\n–ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:")
    for var in check_environment():
        status = '‚úÖ' if var['exists'] else '‚ùå'
        print(f"{status} {var['description']}")
    
    # –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    all_checks = all([
        sonar_ok,
        all(t['status'] for t in check_tools()),
        all(c['exists'] for c in check_configs()),
        all(v['exists'] for v in check_environment())
    ])
    
    if all_checks:
        print("\n‚úÖ –í—Å—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ!")
        sys.exit(0)
    else:
        print("\n‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º–∏!")
        sys.exit(1)

if __name__ == '__main__':
    main()

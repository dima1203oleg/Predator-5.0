import os
import sys
import requests
from pathlib import Path
import yaml


def verify_sonarqube_connection():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ SonarQube"""
    host = os.getenv("SONAR_HOST_URL")
    token = os.getenv("SONAR_TOKEN")

    if not all([host, token]):
        return False, "–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ SONAR_HOST_URL –∞–±–æ SONAR_TOKEN"

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ SSL –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        response = requests.get(
            f"{host}/api/system/status", auth=(token, ""), timeout=10, verify=True
        )

        if response.status_code != 200:
            return False, f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ SonarQube: {response.status_code}"

        info = response.json()
        return True, f"SonarQube {info.get('version')} –¥–æ—Å—Ç—É–ø–Ω–∏–π"
    except requests.exceptions.SSLError:
        return False, "–ü–æ–º–∏–ª–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É"
    except Exception as e:
        return False, f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {str(e)}"


def verify_configurations():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    required_files = {
        ".github/workflows/ci.yml": "CI –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è",
        ".github/workflows/deploy.yml": "Deploy –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è",
        "sonar-project.properties": "SonarQube –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è",
        ".snyk": "Snyk –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è",
        "requirements.txt": "Python –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ",
    }

    errors = []
    for file_path, description in required_files.items():
        if not Path(file_path).exists():
            errors.append(f"–í—ñ–¥—Å—É—Ç–Ω—ñ–π {description} ({file_path})")

    return len(errors) == 0, errors


def verify_security_tokens():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω—ñ–≤ –±–µ–∑–ø–µ–∫–∏"""
    required_tokens = {
        "GITHUB_TOKEN": "GitHub —Ç–æ–∫–µ–Ω",
        "SONAR_TOKEN": "SonarQube —Ç–æ–∫–µ–Ω",
        "SNYK_TOKEN": "Snyk —Ç–æ–∫–µ–Ω",
        "CODECOV_TOKEN": "Codecov —Ç–æ–∫–µ–Ω",
    }

    missing = []
    for token, description in required_tokens.items():
        if not os.getenv(token):
            missing.append(f"{description} ({token})")

    return len(missing) == 0, missing


def main():
    print("üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...\n")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ SonarQube
    sonar_ok, sonar_msg = verify_sonarqube_connection()
    print(f"{'‚úÖ' if sonar_ok else '‚ùå'} SonarQube: {sonar_msg}")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π
    config_ok, config_errors = verify_configurations()
    print(f"\n{'‚úÖ' if config_ok else '‚ùå'} –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ —Ñ–∞–π–ª–∏:")
    if not config_ok:
        for error in config_errors:
            print(f"  - {error}")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—ñ–≤
    tokens_ok, missing_tokens = verify_security_tokens()
    print(f"\n{'‚úÖ' if tokens_ok else '‚ùå'} –¢–æ–∫–µ–Ω–∏ –±–µ–∑–ø–µ–∫–∏:")
    if not tokens_ok:
        for token in missing_tokens:
            print(f"  - {token}")

    # –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if all([sonar_ok, config_ok, tokens_ok]):
        print("\n‚úÖ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É—Å–ø—ñ—à–Ω—ñ!")
        sys.exit(0)
    else:
        print("\n‚ùå –í–∏—è–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏, —â–æ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è")
        sys.exit(1)


if __name__ == "__main__":
    main()

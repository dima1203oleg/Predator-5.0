import os
import sys
import yaml
from pathlib import Path
import requests


def check_workflow_files():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ —Ñ–∞–π–ª—ñ–≤ GitHub Actions"""
    workflows_dir = Path(".github/workflows")

    if not workflows_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è .github/workflows –≤—ñ–¥—Å—É—Ç–Ω—è")
        return False

    required_files = ["ci.yml", "deploy.yml"]
    found_files = [f.name for f in workflows_dir.glob("*.yml")]

    if not all(f in found_files for f in required_files):
        print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏: {set(required_files) - set(found_files)}")
        return False

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å YAML
    for file in required_files:
        try:
            with open(workflows_dir / file) as f:
                yaml.safe_load(f)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ {file}: {str(e)}")
            return False

    print("‚úÖ –§–∞–π–ª–∏ GitHub Actions –≤ –ø–æ—Ä—è–¥–∫—É")
    return True


def check_actions_status():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É GitHub Actions"""
    token = os.getenv("GITHUB_TOKEN")
    repo = os.getenv("GITHUB_REPOSITORY", "your-org/predator-analytics")

    if not token:
        print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π GITHUB_TOKEN")
        return False

    try:
        headers = {"Authorization": f"token {token}", "Accept": "application/vnd.github.v3+json"}
        response = requests.get(
            f"https://api.github.com/repos/{repo}/actions/runs", headers=headers
        )

        if response.status_code == 200:
            runs = response.json()["workflow_runs"]
            if runs:
                latest = runs[0]
                status = "‚úÖ" if latest["conclusion"] == "success" else "‚ùå"
                print(f"{status} –û—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø—É—Å–∫: {latest['conclusion']}")
                return latest["conclusion"] == "success"
        return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å—Ç–∞—Ç—É—Å—É: {str(e)}")
        return False


def check_dependencies():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    required_files = ["requirements.txt", "Dockerfile", "docker-compose.yml"]

    for file in required_files:
        if not Path(file).exists():
            print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ñ–∞–π–ª {file}")
            return False

    print("‚úÖ –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ")
    return True


def main():
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å GitHub Actions...")

    checks = [
        ("–§–∞–π–ª–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó", check_workflow_files()),
        ("–°—Ç–∞—Ç—É—Å Actions", check_actions_status()),
        ("–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ", check_dependencies()),
    ]

    success = all(check[1] for check in checks)

    if success:
        print("\n‚úÖ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\n‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏, —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è")
        sys.exit(1)


if __name__ == "__main__":
    main()

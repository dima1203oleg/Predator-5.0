import os
import sys
import requests
import yaml
import subprocess
from pathlib import Path
from typing import Tuple, Dict, List


def verify_sonarqube() -> Tuple[bool, str]:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ SonarQube"""
    try:
        host = os.getenv("SONAR_HOST_URL")
        token = os.getenv("SONAR_TOKEN")

        if not all([host, token]):
            return False, "–í—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ SONAR_HOST_URL –∞–±–æ SONAR_TOKEN"

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º
        response = requests.get(
            f"{host}/api/system/info", auth=(token, ""), timeout=10, verify=True
        )

        if response.status_code == 200:
            info = response.json()
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ—Ä—Å—ñ—ó —ñ —Å—Ç–∞—Ç—É—Å—É
            version = info.get("version", "unknown")
            status = info.get("status", "unknown")
            return True, f"SonarQube {version} ({status})"
        return False, f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {response.status_code}"
    except Exception as e:
        return False, f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"


def verify_tools() -> List[Dict[str, bool]]:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤"""
    tools = {
        "sonar-scanner": "sonar-scanner --version",
        "docker": "docker --version",
        "python": "python --version",
        "pip": "pip --version",
    }

    results = []
    for tool, command in tools.items():
        try:
            subprocess.check_output(command.split(), stderr=subprocess.STDOUT)
            results.append({"tool": tool, "installed": True})
        except:
            results.append({"tool": tool, "installed": False})
    return results


def verify_security_config() -> Tuple[bool, List[str]]:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –±–µ–∑–ø–µ–∫–∏"""
    errors = []

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    required_files = {
        "sonar-project.properties": "SonarQube –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è",
        ".snyk": "Snyk –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è",
        ".github/workflows/ci.yml": "CI –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è",
        "Dockerfile": "Docker –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è",
    }

    for file_path, description in required_files.items():
        if not Path(file_path).exists():
            errors.append(f"–í—ñ–¥—Å—É—Ç–Ω—ñ–π {description} ({file_path})")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    required_env = ["SONAR_TOKEN", "SNYK_TOKEN", "GITHUB_TOKEN"]
    missing_env = [var for var in required_env if not os.getenv(var)]
    if missing_env:
        errors.append(f"–í—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞: {', '.join(missing_env)}")

    return len(errors) == 0, errors


def main():
    print("üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–∏...\n")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ SonarQube
    sonar_ok, sonar_msg = verify_sonarqube()
    print(f"{'‚úÖ' if sonar_ok else '‚ùå'} SonarQube: {sonar_msg}")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
    print("\n–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤:")
    tools_status = verify_tools()
    for tool in tools_status:
        status = "‚úÖ" if tool["installed"] else "‚ùå"
        print(f"{status} {tool['tool']}")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –±–µ–∑–ø–µ–∫–∏
    security_ok, security_errors = verify_security_config()
    print(f"\n{'‚úÖ' if security_ok else '‚ùå'} –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–µ–∑–ø–µ–∫–∏:")
    if not security_ok:
        for error in security_errors:
            print(f"  - {error}")

    # –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    success = all([sonar_ok, security_ok, all(tool["installed"] for tool in tools_status)])

    if success:
        print("\n‚úÖ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É—Å–ø—ñ—à–Ω—ñ!")
        sys.exit(0)
    else:
        print("\n‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏, —â–æ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –≤–∏—Ä—ñ—à–µ–Ω–Ω—è")
        sys.exit(1)


if __name__ == "__main__":
    main()

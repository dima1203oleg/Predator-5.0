import os
import sys
from pathlib import Path


def check_sonar_config():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å SonarCloud"""
    sonar_file = Path("sonar-project.properties")
    if not sonar_file.exists():
        print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ñ–∞–π–ª sonar-project.properties")
        return False

    required_props = ["sonar.projectKey", "sonar.organization", "sonar.sources"]

    with open(sonar_file) as f:
        content = f.read()
        for prop in required_props:
            if prop not in content:
                print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—è –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å {prop} –≤ sonar-project.properties")
                return False

    return True


def check_snyk_config():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Snyk"""
    snyk_file = Path(".snyk")
    if not snyk_file.exists():
        print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ñ–∞–π–ª .snyk")
        return False

    github_token = os.getenv("SNYK_TOKEN")
    if not github_token:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –æ—Ç–æ—á–µ–Ω–Ω—è SNYK_TOKEN")
        return False

    return True


def check_security_tokens():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω—ñ–≤ –±–µ–∑–ø–µ–∫–∏"""
    required_tokens = ["SONAR_TOKEN", "SNYK_TOKEN", "GITHUB_TOKEN"]

    missing_tokens = [token for token in required_tokens if not os.getenv(token)]

    if missing_tokens:
        print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ç–æ–∫–µ–Ω–∏: {', '.join(missing_tokens)}")
        return False
    return True


def check_security_files():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ–∞–π–ª—ñ–≤ –±–µ–∑–ø–µ–∫–∏"""
    required_files = {
        ".snyk": "–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Snyk",
        "sonar-project.properties": "–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è SonarCloud",
        ".github/workflows/ci.yml": "CI/CD –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è",
    }

    for file_path, description in required_files.items():
        if not Path(file_path).exists():
            print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π {description}: {file_path}")
            return False
    return True


def main():
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±–µ–∑–ø–µ–∫–∏...")

    checks = [
        ("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è SonarCloud", check_sonar_config()),
        ("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Snyk", check_snyk_config()),
        ("–¢–æ–∫–µ–Ω–∏ –±–µ–∑–ø–µ–∫–∏", check_security_tokens()),
        ("–§–∞–π–ª–∏ –±–µ–∑–ø–µ–∫–∏", check_security_files()),
    ]

    success = all(result for _, result in checks)
    failed = [name for name, result in checks if not result]

    if success:
        print("\n‚úÖ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–µ–∑–ø–µ–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")
    else:
        print(f"\n‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {', '.join(failed)}")
        sys.exit(1)


if __name__ == "__main__":
    main()

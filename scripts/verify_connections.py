import os
import sys
import requests
import subprocess
from pathlib import Path


def check_sonarqube():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ SonarQube"""
    try:
        token = "ae5fe5168d12c610c7b94cdb641b53e1c54c0654"
        host = "http://localhost:9000"
        response = requests.get(
            f"{host}/api/system/status", auth=(token, ""), timeout=10, verify=True
        )

        if response.status_code == 200:
            print("‚úÖ SonarQube: –ó'—î–¥–Ω–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ")
            return True
        print(f"‚ùå SonarQube: –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è ({response.status_code})")
        return False
    except Exception as e:
        print(f"‚ùå SonarQube: {str(e)}")
        return False


def check_sonar_scanner():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ SonarScanner"""
    try:
        result = subprocess.run(["sonar-scanner", "-v"], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ SonarScanner: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        print("‚ùå SonarScanner: –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return False
    except Exception:
        print("‚ùå SonarScanner: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return False


def check_configs():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    files = {
        "sonar-project.properties": "SonarQube –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è",
        ".snyk": "Snyk –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è",
        "docker-compose.yml": "Docker –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è",
        ".env": "–ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è",
    }

    all_exist = True
    for file, desc in files.items():
        if Path(file).exists():
            print(f"‚úÖ {desc}: –§–∞–π–ª –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"‚ùå {desc}: –§–∞–π–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
            all_exist = False
    return all_exist


def check_docker():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker"""
    try:
        result = subprocess.run(["docker", "--version"], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Docker: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Docker Compose
            compose_result = subprocess.run(
                ["docker-compose", "--version"], capture_output=True, text=True
            )
            if compose_result.returncode == 0:
                print("‚úÖ Docker Compose: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                return True
        return False
    except Exception as e:
        print(f"‚ùå Docker: {str(e)}")
        return False


def main():
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –ø—ñ–¥–∫–ª—é—á–µ–Ω—å...\n")

    results = [
        ("SonarQube", check_sonarqube()),
        ("SonarScanner", check_sonar_scanner()),
        ("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó", check_configs()),
        ("Docker", check_docker()),
    ]

    print("\n–ü—ñ–¥—Å—É–º–æ–∫:")
    success = all(result[1] for result in results)

    if success:
        print("\n‚úÖ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É—Å–ø—ñ—à–Ω—ñ!")
        sys.exit(0)
    else:
        failed = [name for name, result in results if not result]
        print(f"\n‚ùå –ù–µ–≤–¥–∞–ª—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {', '.join(failed)}")
        sys.exit(1)


if __name__ == "__main__":
    main()

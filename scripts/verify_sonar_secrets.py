import os
import sys
import requests
from pathlib import Path
from requests.auth import HTTPBasicAuth

def verify_sonar_secrets():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç—ñ–≤ —Ç–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó SonarQube"""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å SonarQube...\n")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    host_url = os.getenv('SONAR_HOST_URL', 'http://localhost:9000')
    token = os.getenv('SONAR_TOKEN')

    if not token:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: –∑–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ SONAR_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É
    config_file = Path('sonar-project.properties')
    if not config_file.exists():
        print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ñ–∞–π–ª sonar-project.properties")
        return False
        
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
        response = requests.get(
            f"{host_url}/api/system/status",
            auth=HTTPBasicAuth(token, ''),
            timeout=10,
            verify=False  # –í–∏–º–∫–Ω–µ–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É SSL, —è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å–∞–º–æ–ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç
        )
        
        if response.status_code != 200:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ SonarQube: HTTP {response.status_code} - {response.text}")
            return False
        
        status = response.json()
        if 'status' in status and 'version' in status:
            print(f"‚úÖ SonarQube –¥–æ—Å—Ç—É–ø–Ω–∏–π (–≤–µ—Ä—Å—ñ—è {status.get('version')}, —Å—Ç–∞—Ç—É—Å: {status.get('status')})")
        else:
            print("‚ö†Ô∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ SonarQube –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–æ–ª—ñ–≤ (status/version)")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç—É
        project_key = 'predator-analytics'
        project_response = requests.get(
            f"{host_url}/api/projects/search?projects={project_key}",
            auth=HTTPBasicAuth(token, ''),
            timeout=10
        )
        
        if project_response.status_code == 200:
            projects = project_response.json().get('components', [])
            if any(p['key'] == project_key for p in projects):
                print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç {project_key} –∑–Ω–∞–π–¥–µ–Ω–æ")
            else:
                print(f"‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç {project_key} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—Ä–æ—î–∫—Ç—ñ–≤: HTTP {project_response.status_code} - {project_response.text}")
        
        return True
            
    except requests.exceptions.SSLError:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –¥—ñ–π—Å–Ω–∏–π —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç.")
        return False
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ SonarQube. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∏–π.")
        return False
    except requests.exceptions.Timeout:
        print("‚ùå –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ SonarQube –≤–∏—á–µ—Ä–ø–∞–Ω–æ.")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {str(e)}")
        return False

if __name__ == '__main__':
    if not verify_sonar_secrets():
        print("\n‚ö†Ô∏è –ù–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥—ñ—ó:")
        print("1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ SonarQube —Å–µ—Ä–≤–µ—Ä—É")
        print("2. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –∑–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ SONAR_TOKEN –∑–∞–¥–∞–Ω–∞")
        print("3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª sonar-project.properties")
        sys.exit(1)
    else:
        print("\n‚úÖ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É—Å–ø—ñ—à–Ω—ñ")

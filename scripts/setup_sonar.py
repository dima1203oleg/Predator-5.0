import os
import sys
import requests
import subprocess
from pathlib import Path


def setup_sonar_connection():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ SonarQube"""
    print("üîÑ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ SonarQube...")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
    host = os.getenv("SONAR_HOST_URL")
    token = os.getenv("SONAR_TOKEN")

    if not host:
        host = input("–í–≤–µ–¥—ñ—Ç—å URL SonarQube —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, http://localhost:9000): ")
        os.environ["SONAR_HOST_URL"] = host

    if not token:
        token = input("–í–≤–µ–¥—ñ—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø—É SonarQube: ")
        os.environ["SONAR_TOKEN"] = token

    try:
        # –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        response = requests.get(
            f"{host}/api/system/status", auth=(token, ""), timeout=10, verify=True
        )

        if response.status_code == 200:
            print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ SonarQube —É—Å–ø—ñ—à–Ω–µ")

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            save_config(host, token)

            # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø—Ä–æ–µ–∫—Ç
            setup_project()
            return True
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {response.status_code}")
            return False

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        return False


def save_config(host: str, token: str):
    """–ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    config_dir = Path.home() / ".sonar"
    config_dir.mkdir(exist_ok=True)

    config_file = config_dir / "config"
    with open(config_file, "w") as f:
        f.write(f"sonar.host.url={host}\n")
        f.write(f"sonar.token={token}\n")

    print("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ")


def setup_project():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É"""
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–æ–µ–∫—Ç—É —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
        if not Path("sonar-project.properties").exists():
            with open("sonar-project.properties", "w") as f:
                f.write(
                    """
sonar.projectKey=predator-analytics
sonar.projectName=Predator Analytics
sonar.sources=predator_analytics
sonar.tests=tests
sonar.python.coverage.reportPaths=coverage.xml
sonar.python.version=3.9
                """.strip()
                )

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
        result = subprocess.run(["sonar-scanner"], capture_output=True, text=True)

        if result.returncode == 0:
            print("‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—ñ: {result.stderr}")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –ø—Ä–æ–µ–∫—Ç—É: {str(e)}")


if __name__ == "__main__":
    setup_sonar_connection()

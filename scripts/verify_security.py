import os
import sys
import requests
import yaml
from pathlib import Path
from typing import Tuple, List


def verify_sonarqube() -> Tuple[bool, str]:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å SonarQube"""
    try:
        host = os.getenv("SONAR_HOST_URL")
        token = os.getenv("SONAR_TOKEN")
        project_key = "predator-analytics"

        if not all([host, token]):
            return False, "–í—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ SONAR_HOST_URL –∞–±–æ SONAR_TOKEN"

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        response = requests.get(
            f"{host}/api/system/info",
            auth=(token, ""),
            timeout=10,
            verify=True,  # –î–æ–¥–∞—î–º–æ SSL –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é
        )

        if response.status_code != 200:
            return False, f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {response.status_code}"

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–æ–µ–∫—Ç—É
        project_response = requests.get(
            f"{host}/api/projects/search?projects={project_key}", auth=(token, ""), timeout=10
        )

        if project_response.status_code != 200:
            return False, "–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç—É"

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Quality Gate
        gate_response = requests.get(
            f"{host}/api/qualitygates/get_by_project?project={project_key}",
            auth=(token, ""),
            timeout=10,
        )

        if gate_response.status_code != 200:
            return False, "Quality Gate –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"

        return True, "SonarQube –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω–æ"

    except Exception as e:
        return False, f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"


def verify_snyk() -> Tuple[bool, List[str]]:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Snyk"""
    errors = []

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—É
    if not os.getenv("SNYK_TOKEN"):
        errors.append("–í—ñ–¥—Å—É—Ç–Ω—ñ–π SNYK_TOKEN")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    snyk_file = Path(".snyk")
    if not snyk_file.exists():
        errors.append("–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ñ–∞–π–ª .snyk")
    else:
        try:
            with open(snyk_file) as f:
                config = yaml.safe_load(f)
                if not config.get("version"):
                    errors.append("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç .snyk")
                if not config.get("severity-threshold"):
                    errors.append("–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –ø–æ—Ä—ñ–≥ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—ñ")
        except Exception as e:
            errors.append(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è .snyk: {str(e)}")

    return len(errors) == 0, errors


def verify_github_actions():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å GitHub Actions"""
    workflow_dir = Path(".github/workflows")
    if not workflow_dir.exists():
        print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è .github/workflows")
        return False

    required_files = {"ci.yml", "deploy.yml"}
    existing_files = {f.name for f in workflow_dir.glob("*.yml")}

    missing = required_files - existing_files
    if missing:
        print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ —Ñ–∞–π–ª–∏: {missing}")
        return False

    print("‚úÖ GitHub Actions –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–µ–∫—Ç–Ω—ñ")
    return True


def main():
    print("üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–µ–∑–ø–µ–∫–∏...\n")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ SonarQube
    sonar_success, sonar_message = verify_sonarqube()
    print(f"{'‚úÖ' if sonar_success else '‚ùå'} SonarQube: {sonar_message}")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Snyk
    snyk_success, snyk_errors = verify_snyk()
    print(f"{'‚úÖ' if snyk_success else '‚ùå'} Snyk:")
    if not snyk_success:
        for error in snyk_errors:
            print(f"  - {error}")

    # –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if not all([sonar_success, snyk_success]):
        print("\n‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö –±–µ–∑–ø–µ–∫–∏")
        sys.exit(1)
    else:
        print("\n‚úÖ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–µ–∑–ø–µ–∫–∏ —É—Å–ø—ñ—à–Ω—ñ")


if __name__ == "__main__":
    main()

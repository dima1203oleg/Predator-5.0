import os
import sys
import requests
from pathlib import Path


def verify_sonar_setup():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å SonarQube"""
    token = "ae5fe5168d12c610c7b94cdb641b53e1c54c0654"
    host = "http://localhost:9000"
    project = "predator-analytics"

    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å SonarQube...")

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
        response = requests.get(
            f"{host}/api/system/status", auth=(token, ""), timeout=10, verify=True
        )

        if response.status_code != 200:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {response.status_code}")
            return False

        print("‚úÖ –ó'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç—É
        project_response = requests.get(
            f"{host}/api/projects/search?projects={project}", auth=(token, ""), timeout=10
        )

        if project_response.status_code == 200:
            projects = project_response.json().get("components", [])
            if any(p["key"] == project for p in projects):
                print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç {project} —ñ—Å–Ω—É—î")
            else:
                print(f"‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç {project} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç—É")
            return False

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        if not Path("sonar-project.properties").exists():
            print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ñ–∞–π–ª sonar-project.properties")
            return False

        print("‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤ –ø–æ—Ä—è–¥–∫—É")
        return True

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        return False


if __name__ == "__main__":
    if not verify_sonar_setup():
        sys.exit(1)
